version: '3.8'

services:
  # Redis - Conversation memory storage
  redis:
    image: redis:7-alpine
    container_name: redis-memory
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    networks:
      - chat-network

  # Backend - FastAPI application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: chat-backend
    ports:
      - "9090:9090"
    environment:
      # OpenAI Configuration (for ChatGPT provider)
      - OPENAI_API_KEY=${OPENAI_API_KEY:-your_openai_api_key_here}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-5-mini}

      # vLLM Configuration (for self-hosted inference on AWS)
      # Points to your vLLM server running on AWS
      - VLLM_BASE_URL=${VLLM_BASE_URL:-http://your-vllm-server:8000/v1}
      - VLLM_API_KEY=${VLLM_API_KEY:-EMPTY}
      - VLLM_MODEL=${VLLM_MODEL:-meta-llama/Meta-Llama-3.1-8B-Instruct}

      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - REDIS_PASSWORD=
      - SESSION_TTL_SECONDS=3600
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - chat-network

  # Frontend - Nginx serving static files
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: chat-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - chat-network

networks:
  chat-network:
    driver: bridge

volumes:
  redis-data:
    driver: local
